{"version":3,"sources":["components/ImageContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["ImgContainer","react_default","a","createElement","dist","Column","size","onClick","this","props","function","style","width","Image","className","src","image","Component","App","state","selectedImages","characters","score","topScore","winner","shuffle","_this","setState","sort","Math","random","handleEvent","id","updateArray","newArray","slice","includes","push","checkForWin","resetScore","_this2","color","Body","map","character","ImageContainer","key","alt","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf49215b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\r\nimport { Columns } from 'react-bulma-components';\r\nimport { Card } from 'react-bulma-components';\r\n\r\nclass ImgContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Columns.Column size={3}>\r\n        <Card onClick={this.props.function} style={{ width: this.props.width}}>\r\n          <Card.Image className=\"zoom\" src={this.props.image}></Card.Image>\r\n        </Card>\r\n      </Columns.Column>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImgContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport { Columns } from 'react-bulma-components';\nimport { Heading } from 'react-bulma-components';\nimport { Hero } from 'react-bulma-components';\nimport { Section } from 'react-bulma-components';\nimport { Container } from 'react-bulma-components';\nimport characters from './characters.json'\nimport ImgContainer from './components/ImageContainer';\n\nclass App extends Component {\n\n  state = {\n    selectedImages: [],\n    characters,\n    score: 0,\n    topScore: 0,\n    winner: ''\n  }\n\n  shuffle = () => {\n    // https://css-tricks.com/snippets/javascript/shuffle-array/\n    this.setState({ characters: characters.sort(function () { return 0.5 - Math.random() }) });\n  }\n\n  handleEvent = id => {\n    this.updateArray(id)\n    this.shuffle();\n  };\n\n  updateArray = id => {\n    let newArray = this.state.selectedImages.slice();\n    if (this.state.selectedImages.includes(id) === false) {\n      newArray.push(id)\n      this.setState({ selectedImages: newArray })\n      this.setState({ score: this.state.score + 1 });\n      this.checkForWin();\n    } else {\n      this.setState({ winner: 'You Guessed Incorrectly!'})\n      this.resetScore();\n    }\n  }\n\n  checkForWin = () => {\n    if (this.state.score >= 11) {\n      this.setState({ winner: 'You\\'re a winner!' });\n      this.setState({ topScore: 0, score: 0 });\n    } else {\n      this.setState({ winner: 'You Guessed Correctly!'});\n    }\n  }\n\n  resetScore = () => {\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score, score: 0, selectedImages: [] });\n    }\n    this.setState({ score: 0, selectedImages: [] });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Hero color=\"info\" className=\"has-drop-shadow\">\n          <Hero.Body>\n            <Container>\n              <Heading id=\"title\">The Office Clicky Game</Heading>\n              <Columns id=\"results\">\n                <Columns.Column size={4}>Click an image to begin!</Columns.Column>\n                <Columns.Column size={4}>{this.state.winner}</Columns.Column>\n                <Columns.Column size={4}>Score: {this.state.score} | Top Score: {this.state.topScore}</Columns.Column>\n              </Columns>\n            </Container>\n          </Hero.Body>\n        </Hero>\n        <Section>\n          <Container id=\"main\">\n            <Columns>\n              {this.state.characters.map(character => (\n                <ImgContainer\n                  function={() => this.handleEvent(character.id)}\n                  key={character.id}\n                  width=\"175px\"\n                  alt={character.name}\n                  image={character.image}\n                />\n              ))}\n            </Columns>\n          </Container>\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}